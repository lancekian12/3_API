    ## Overview

    This project is a Flask-based web application with a PostgreSQL database, running inside Docker containers. It provides a simple setup process and is ideal for development environments.

    ## How to Start the Project

    Follow these steps to set up and run the project locally.

    ### 1. Set Up Virtual Environment

    To begin, create a virtual environment to isolate your Python dependencies:

    ```bash
    python -m venv venv

    On Windows:
    .\venv\Scripts\Activate

    On macOS/Linux:
    source venv/bin/activate

    ### 2. Install Dependencies
    pip install -r requirements.txt

    ### 3. Set Up and Start Docker Containers
    cd docker
    docker-compose up --build

    ## Project Structure

   3_API/
   ├─ backend/
   │   ├─ app/
   │   │   ├─ __init__.py
   │   │   ├─ config/
   │   │   │   └─ ...
   │   │   ├─ models.py
   │   │   ├─ routes.py
   │   │   └─ ...
   │   ├─ docker/
   │   │   └─ ...
   │   ├─ venv/
   │   │   └─ ...  (optional virtual environment)
   │   ├─ .env
   │   ├─ DockerFile
   │   ├─ requirements.txt
   │   └─ ...
   └─ frontend/
         └─ frontend_folder/
            ├─ node_modules/
            ├─ public/
            │   └─ index.html
            ├─ src/
            │   ├─ assets/
            │   │   └─ ...
            │   ├─ components/
            │   │   ├─ About.jsx
            │   │   ├─ Calories.jsx
            │   │   ├─ ChooseExercise.jsx
            │   │   ├─ Home.jsx
            │   │   ├─ LayoutWithNavigation.jsx
            │   │   ├─ Navigation.jsx
            │   │   └─ Weather.jsx
            │   ├─ index.css
            │   ├─ main.jsx  (or main.js)
            │   └─ ...
            ├─ .gitignore
            ├─ eslint.config.js
            ├─ index.html
            ├─ package.json
            ├─ package-lock.json
            ├─ README.md
            └─ vite.config.js

## APIs We Used

1. **Jikan API** - Fetches anime data  
   URL: [https://api.jikan.moe/v4/anime](https://api.jikan.moe/v4/anime)  
   Purpose: Used to fetch anime data, either based on a specific query or a random selection.  
   Documentation: [Jikan API Documentation](https://jikan.moe/docs/)

2. **Google Books API** - Fetches book data  
   URL: [https://www.googleapis.com/books/v1/volumes](https://www.googleapis.com/books/v1/volumes)  
   Purpose: Used to fetch book data based on a query or to get a random book recommendation.  
   Documentation: [Google Books API Documentation](https://developers.google.com/books)

3. **Dog CEOs Dog API** - Fetches random dog breed images  
   URL: [https://dog.ceo/api/breeds/image/random](https://dog.ceo/api/breeds/image/random)  
   Purpose: Used to fetch random dog breed images, which can be used for dog breed recommendations.  
   Documentation: [Dog CEOs Dog API Documentation](https://dog.ceo/dog-api/)