    ## Overview

    This project is a Flask-based web application with a PostgreSQL database, running inside Docker containers. It provides a simple setup process and is ideal for development environments.

    ## How to Start the Project

    Follow these steps to set up and run the project locally.

    ### 1. Set Up Virtual Environment

    To begin, create a virtual environment to isolate your Python dependencies:

    ```bash
    python -m venv venv

    On Windows:
    .\venv\Scripts\Activate

    On macOS/Linux:
    source venv/bin/activate

    ### 2. Install Dependencies
    pip install -r requirements.txt

    ### 3. Set Up and Start Docker Containers
    cd docker
    docker-compose up --build

    ## Project Structure

    3_API/
    │
    ├── app/                             # Flask application files and initialize app and db in this file
    │   ├── __init__.py                  # Initialize app and database
    │   ├── config/                      # Configuration files
    │   │   └── config.py                # Configuration settings
    │   ├── model.py                     # Database models
    │   ├── routes.py                    # Routes for API
    │
    ├── docker/                          # Docker-related files
    │   ├── postgres/                    # PostgreSQL initialization scripts
    │   │   └── init.sql                 # Database schema initialization
    │   ├── docker-compose.yml           # Defines Docker services (PostgreSQL and Flask app)
    │   └── Dockerfile                   # Docker setup for the Flask app
    │
    ├── venv/                            # Virtual Environment
    ├── .env                             # Environment variables (e.g., database credentials)
    ├── .gitignore                       # Git ignore file to exclude unnecessary files
    ├── Dockerfile                       # Docker container setup (Flask app)
    └── requirements.txt                 # List of Python dependencies

## APIs We Used

1. **Jikan API** - Fetches anime data  
   URL: [https://api.jikan.moe/v4/anime](https://api.jikan.moe/v4/anime)  
   Purpose: Used to fetch anime data, either based on a specific query or a random selection.  
   Documentation: [Jikan API Documentation](https://jikan.moe/docs/)

2. **Google Books API** - Fetches book data  
   URL: [https://www.googleapis.com/books/v1/volumes](https://www.googleapis.com/books/v1/volumes)  
   Purpose: Used to fetch book data based on a query or to get a random book recommendation.  
   Documentation: [Google Books API Documentation](https://developers.google.com/books)

3. **Dog CEOs Dog API** - Fetches random dog breed images  
   URL: [https://dog.ceo/api/breeds/image/random](https://dog.ceo/api/breeds/image/random)  
   Purpose: Used to fetch random dog breed images, which can be used for dog breed recommendations.  
   Documentation: [Dog CEOs Dog API Documentation](https://dog.ceo/dog-api/)